generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String           @default("user")
  walletAddress     String?          @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  accounts          Account[]
  sessions          Session[]
  settings          UserSettings?
  activity          ActivityLog[]
  skills            Skill[]
  reputation        Int              @default(0)
  products          Product[]        @relation("CreatedProducts")
  purchases         Transaction[]    @relation("Purchases")
  sales             Transaction[]    @relation("Sales")
  challenges        Challenge[]      @relation("ParticipatedChallenges")
  collaborations    Collaboration[]  @relation("UserCollaborations")
  learningProgress  LearningProgress[]
  notifications     Notification[]
  apiUsage          ApiUsage[]
  twoFactorSecret   String?
  recoveryCodes     String?
  twoFactorEnabled  Boolean          @default(false)
  reviews          Review[]          @relation("UserReviews")
  receivedReviews  Review[]          @relation("ReceivedReviews")
  buyerReviews     Review[]          @relation("BuyerReviews")
  passwordResets   password_reset[]
  datasets         Dataset[]
}

model password_reset {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@index([userId])
}

model Account {
  id        String   @id @default(cuid())
  userId    String
  type      String
  provider  String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id String @id @default(cuid())
  userId String @unique
  promptpayId String?
  currency String @default("THB")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id String @id @default(cuid())
  userId String
  type String
  description String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id String @id @default(cuid())
  userId String
  name String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id String @id @default(cuid())
  title String
  description String
  price Float
  category String
  fileHash String
  version String
  metrics String?
  extendedMetrics String?
  tags String?
  ownerId String
  owner User @relation("CreatedProducts", fields: [ownerId], references: [id])
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  datasetId     String?       @unique
  productType   String // Added productType
  dataset       Dataset?      @relation(fields: [datasetId], references: [id])
  promotions    Promotion[]   @relation("ProductPromotions")

  @@index([title])
  @@index([category])
}

model Transaction {
  id String @id @default(cuid())
  buyerId String
  sellerId String
  productId String
  buyer User @relation("Purchases", fields: [buyerId], references: [id])
  seller User @relation("Sales", fields: [sellerId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  amount Float
  buyerFee Float
  sellerFee Float
  totalAmount Float
  status TransactionStatus @default(pending)
  paymentMethod PaymentMethod
  transactionHash String?
}

enum TransactionStatus {
  pending
  completed
  failed
  refunded
}

enum PaymentMethod {
    credit_card
    omise
    bank_transfer
}

model Challenge {
  id String @id @default(cuid())
  userId String
  name String
  user User @relation("ParticipatedChallenges", fields: [userId], references: [id])
}

model Collaboration {
  id String @id @default(cuid())
  userId String
  name String
  user User @relation("UserCollaborations", fields: [userId], references: [id])
}

model LearningProgress {
  id String @id @default(cuid())
  userId String
  courseId String
  progress Float
  completed Boolean @default(false)
  timeSpent Int @default(0)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id String @id @default(cuid())
  userId String
  message String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiUsage {
  id String @id @default(cuid())
  userId String
  apiKey String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id          String   @id @default(cuid())
  reviewerId  String
  revieweeId  String
  rating      Int
  comment     String
  verified    Boolean  @default(false)
  helpful     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewer    User     @relation("UserReviews", fields: [reviewerId], references: [id])
  reviewee    User     @relation("ReceivedReviews", fields: [revieweeId], references: [id])
  buyer       User     @relation("BuyerReviews", fields: [reviewerId], references: [id])
}

model Dataset {
  id          String   @id @default(cuid())
  title       String
  description String
  coverImage  String?
  files       DatasetFile[]
  tags        String?
  metadata    String?  // JSON string for additional metadata
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product?

  @@index([title])
  @@index([userId])
}

model DatasetFile {
  id        String   @id @default(cuid())
  filename  String
  fileType  String   // e.g., "image", "video", "gif"
  fileUrl   String
  datasetId String
  dataset   Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([datasetId])
}

model Promotion {
  id            String    @id @default(cuid())
  productId     String?
  category      String?
  startDate     DateTime
  endDate       DateTime
  status        PromotionStatus
  discountType  DiscountType
  discountValue Float
  products      Product[]   @relation("ProductPromotions")

  @@index([productId])
  @@index([category])
}

enum PromotionStatus {
  ACTIVE
  INACTIVE
  SCHEDULED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
