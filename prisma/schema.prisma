generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String         @default("user")
  walletAddress     String?        @unique
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  accounts          Account[]
  sessions          Session[]
  settings          String?
  activity          String?
  skills            String?
  reputation        Int            @default(0)
  products          Product[]      @relation("CreatedProducts")
  purchases         Transaction[]  @relation("Purchases")
  sales             Transaction[]  @relation("Sales")
  challenges        Challenge[]    @relation("ParticipatedChallenges")
  collaborations    Collaboration[] @relation("UserCollaborations")
  learningProgress  LearningProgress[]
  notifications     Notification[]
  apiUsage         ApiUsage[]
  twoFactorSecret   String?
  recoveryCodes     String?
  twoFactorEnabled  Boolean      @default(false)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String       @id @default(cuid())
  title       String
  description String
  price       Float
  fileHash    String
  version     String       @default("1.0.0")
  category    String
  tags        String
  metrics     String?
  extendedMetrics String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     String
  owner       User         @relation("CreatedProducts", fields: [ownerId], references: [id])
  transactions Transaction[] @relation("ProductTransactions")
}

model Transaction {
  id          String   @id @default(cuid())
  buyerId     String
  sellerId    String
  productId   String
  amount      Float
  status      String
  paymentMethod String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  buyer       User     @relation("Purchases", fields: [buyerId], references: [id])
  seller      User     @relation("Sales", fields: [sellerId], references: [id])
  product     Product  @relation("ProductTransactions", fields: [productId], references: [id])
  currency    String?
  walletAddress String?
  subscriptionId String?
}

model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  rules       String
  startDate   DateTime
  endDate     DateTime
  reward      String
  status      String   @default("upcoming")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  participants User[]  @relation("ParticipatedChallenges")
  submissions String?
}

model Collaboration {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     User[]   @relation("UserCollaborations")
  resources   String?
}

model LearningProgress {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  progress    Float    @default(0)
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  data        String?
}

model ApiUsage {
  id          String   @id @default(cuid())
  userId      String
  endpoint    String
  count       Int      @default(0)
  quota       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  content     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  data        String?
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  startDate   DateTime
  endDate     DateTime
  status      String   @default("upcoming")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  data        String?
}
