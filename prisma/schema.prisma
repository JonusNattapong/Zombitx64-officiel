generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String          @default("user")
  walletAddress     String?         @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  accounts          Account[]
  sessions          Session[]
  settings          UserSettings?
  activity          ActivityLog[]
  skills            Skill[]
  reputation        Int             @default(0)
  products          Product[]       @relation("CreatedProducts")
  boughtItems       Transaction[]   @relation("BoughtItems")
  soldItems         Transaction[]   @relation("SoldItems")
  challenges        Challenge[]     @relation("ParticipatedChallenges")
  collaborations    Collaboration[] @relation("UserCollaborations")
  learningProgress  LearningProgress[]
  notifications     Notification[]
  apiUsage          ApiUsage[]
  twoFactorSecret   String?
  recoveryCodes     String?
  twoFactorEnabled  Boolean         @default(false)
  reviews           Review[]        @relation("UserReviews")
  receivedReviews   Review[]        @relation("ReceivedReviews")
  buyerReviews      Review[]        @relation("BuyerReviews")
  passwordResets    password_reset[]
  datasets          Dataset[]
  nameChanges       NameChange[]
  buyerTransactions EscrowTransaction[] @relation("BuyerTransactions")
  sellerTransactions EscrowTransaction[] @relation("SellerTransactions")
  initiatedDisputes Dispute[]          @relation("DisputeInitiator")
  resolvedDisputes  Dispute[]          @relation("DisputeResolver")
  ebooks           Ebook[]
}

model password_reset {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  used      Boolean   @default(false)

  @@index([userId], map: "password_reset_userId_idx")
}

model Account {
  id            String        @id @default(cuid())
  userId        String
  type          String
  provider      String
  providerAccountId String
  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String        @id @default(cuid())
  sessionToken  String        @unique
  userId        String
  expires       DateTime
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id            String        @id @default(cuid())
  userId        String        @unique
  promptpayId   String?
  currency      String        @default("THB")
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id            String        @id @default(cuid())
  userId        String
  type          String
  description   String
  createdAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id            String        @id @default(cuid())
  userId        String
  name          String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id            String        @id @default(cuid())
  name          String
  description   String
  price         Float
  category      String
  fileHash      String
  version       String
  metrics       String?
  extendedMetrics String?
  tags          String?
  status        String        @default("AVAILABLE")  // AVAILABLE, PENDING_PAYMENT, SOLD
  ownerId       String
  owner         User          @relation("CreatedProducts", fields: [ownerId], references: [id])
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  datasetId     String?       @unique
  productType   String        // DATASET, EBOOK, OTHER
  dataset       Dataset?      @relation(fields: [datasetId], references: [id])
  promotions    Promotion[]   @relation("ProductPromotions")
  currentStatus String?
  escrowTransactions EscrowTransaction[]
  ebook         Ebook?        // Added ebook relation

  @@index([name], map: "Product_name_idx")
  @@index([category], map: "Product_category_idx")
}

model Transaction {
  id            String          @id @default(cuid())
  amount        Float
  status        String        // PENDING, IN_ESCROW, COMPLETED, DISPUTED, REFUNDED, CANCELLED
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  product       Product         @relation(fields: [productId], references: [id])
  productId     String
  buyer         User            @relation("BoughtItems", fields: [buyerId], references: [id])
  buyerId       String
  seller        User            @relation("SoldItems", fields: [sellerId], references: [id])
  sellerId      String
  buyerFee      Float
  sellerFee     Float
  totalAmount   Float
  paymentMethod String         // BLOCKCHAIN, BANK_TRANSFER, CREDIT_CARD
  platformFee   Float
  escrowFee     Float
  transactionHash String?
  escrowId      String?
  disputeStatus String         @default("NONE") // NONE, PENDING, RESOLVED
  disputeReason String?
  disputeOpenedAt DateTime?
  disputeResolvedAt DateTime?
  disputeResolution String?
  disputeResolutionReason String?
  completedAt   DateTime?

  @@index([buyerId], map: "Transaction_buyerId_idx")
  @@index([sellerId], map: "Transaction_sellerId_idx")
}

model Challenge {
  id            String        @id @default(cuid())
  userId        String
  name          String
  user          User            @relation("ParticipatedChallenges", fields: [userId], references: [id])
}

model Collaboration {
  id            String        @id @default(cuid())
  userId        String
  name          String
  user          User            @relation("UserCollaborations", fields: [userId], references: [id])
}

model LearningProgress {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  progress      Float
  completed     Boolean         @default(false)
  timeSpent     Int             @default(0)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      String?  // Store JSON as string
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Notification_userId_idx")
}

model ApiUsage {
  id            String        @id @default(cuid())
  userId        String
  apiKey        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id            String        @id @default(cuid())
  reviewerId    String
  revieweeId    String
  rating        Int
  comment       String
  verified      Boolean         @default(false)
  helpful       Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  reviewer      User            @relation("UserReviews", fields: [reviewerId], references: [id])
  reviewee      User            @relation("ReceivedReviews", fields: [revieweeId], references: [id])
  buyer         User            @relation("BuyerReviews", fields: [reviewerId], references: [id])
}

model Dataset {
  id            String        @id @default(cuid())
  title         String
  description   String
  coverImage    String?
  files         DatasetFile[]
  tags          String?
  metadata      String?       // JSON string for additional metadata
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        String       @default("PENDING")
  product       Product?

  @@index([title], map: "Dataset_title_idx")
  @@index([userId], map: "Dataset_userId_idx")
}

model DatasetFile {
  id            String        @id @default(cuid())
  filename      String
  fileType      String        // e.g., "image", "video", "gif"
  fileUrl       String
  fileSize      Int          @default(0)
  filePath      String
  fileHash      String
  metadata      String?
  datasetId     String
  dataset       Dataset         @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())

  @@index([datasetId], map: "DatasetFile_datasetId_idx")
  @@index([fileHash], map: "DatasetFile_fileHash_idx")
}

model Promotion {
  id            String        @id @default(cuid())
  productId     String?
  category      String?
  startDate     DateTime
  endDate       DateTime
  status        String        @default("INACTIVE") // ACTIVE, INACTIVE, SCHEDULED
  discountType  String        // PERCENTAGE, FIXED
  discountValue Float
  products      Product[]     @relation("ProductPromotions")

  @@index([productId], map: "Promotion_productId_idx")
  @@index([category], map: "Promotion_category_idx")
}

model NameChange {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model EscrowTransaction {
  id              String    @id @default(cuid())
  amount          Float
  buyerId         String
  sellerId        String
  productId       String
  status          String    // PENDING, COMPLETED, DISPUTED, REFUNDED
  currency        String
  transactionHash String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  buyer           User      @relation("BuyerTransactions", fields: [buyerId], references: [id])
  seller          User      @relation("SellerTransactions", fields: [sellerId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])
  dispute         Dispute?

  @@index([buyerId], map: "EscrowTransaction_buyerId_idx")
  @@index([sellerId], map: "EscrowTransaction_sellerId_idx")
  @@index([productId], map: "EscrowTransaction_productId_idx")
}

model Dispute {
  id              String            @id @default(cuid())
  transactionId   String            @unique
  reason          String
  evidence        String?
  status          String            // OPEN, RESOLVED
  resolution      String?
  refundAmount    Float?
  initiatorId     String
  resolvedById    String?
  resolvedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  transaction     EscrowTransaction @relation(fields: [transactionId], references: [id])
  initiator       User              @relation("DisputeInitiator", fields: [initiatorId], references: [id])
  resolvedBy      User?             @relation("DisputeResolver", fields: [resolvedById], references: [id])

  @@index([initiatorId], map: "Dispute_initiatorId_idx")
  @@index([resolvedById], map: "Dispute_resolvedById_idx")
}

model Ebook {
  id               String    @id @default(uuid())
  title            String
  description      String
  category         String
  tags             String    @default("[]") // JSON array of strings
  language         String
  author           String
  publishYear      String?
  publisher        String?
  isbn             String?   @unique
  pages            Int?
  tableOfContents  String?   // JSON structure
  sampleContent    String?   // First chapter or preview
  coverImage       String?
  fileUrl          String?
  previewUrl       String?
  visibility       String    @default("PUBLIC") // PUBLIC, PRIVATE, UNLISTED
  licenseType      String    // FREE, PAID, SUBSCRIPTION, EDUCATIONAL, ENTERPRISE
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String
  productId        String?   @unique
  downloads        Int       @default(0)
  rating           Float?    // Average rating
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product          Product?  @relation(fields: [productId], references: [id])

  @@index([category], map: "Ebook_category_idx")
  @@index([visibility], map: "Ebook_visibility_idx")
  @@index([userId], map: "Ebook_userId_idx")
}
